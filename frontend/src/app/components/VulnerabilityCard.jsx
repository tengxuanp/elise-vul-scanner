"use client";

import { useState } from 'react';
import { ChevronDownIcon, ChevronRightIcon, ExclamationTriangleIcon, ShieldCheckIcon, InformationCircleIcon } from '@heroicons/react/24/outline';

const VulnerabilityCard = ({ vulnerability, index }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'high':
        return 'bg-red-100 border-red-300 text-red-800';
      case 'medium':
        return 'bg-yellow-100 border-yellow-300 text-yellow-800';
      case 'low':
        return 'bg-blue-100 border-blue-300 text-blue-800';
      default:
        return 'bg-gray-100 border-gray-300 text-gray-800';
    }
  };

  const getFamilyIcon = (family) => {
    switch (family?.toLowerCase()) {
      case 'xss':
        return <ExclamationTriangleIcon className="h-5 w-5 text-orange-500" />;
      case 'sqli':
        return <ShieldCheckIcon className="h-5 w-5 text-red-500" />;
      case 'redirect':
        return <InformationCircleIcon className="h-5 w-5 text-blue-500" />;
      default:
        return <InformationCircleIcon className="h-5 w-5 text-gray-500" />;
    }
  };

  const getFamilyColor = (family) => {
    switch (family?.toLowerCase()) {
      case 'xss':
        return 'text-orange-600 bg-orange-50';
      case 'sqli':
        return 'text-red-600 bg-red-50';
      case 'redirect':
        return 'text-blue-600 bg-blue-50';
      default:
        return 'text-gray-600 bg-gray-50';
    }
  };

  const formatUrl = (url) => {
    if (!url) return 'N/A';
    try {
      const urlObj = new URL(url);
      return `${urlObj.pathname}${urlObj.search}`;
    } catch {
      return url;
    }
  };

  const formatConfidence = (confidence) => {
    if (confidence === null || confidence === undefined) return 'N/A';
    return `${(confidence * 100).toFixed(1)}%`;
  };

  const getConfidenceColor = (confidence) => {
    if (confidence >= 0.8) return 'text-green-600';
    if (confidence >= 0.6) return 'text-yellow-600';
    if (confidence >= 0.4) return 'text-orange-600';
    return 'text-red-600';
  };

  return (
    <div className="bg-white border border-gray-200 rounded-lg shadow-sm hover:shadow-md transition-shadow">
      <div 
        className="p-4 cursor-pointer"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {getFamilyIcon(vulnerability.family)}
            <div>
              <div className="flex items-center space-x-2">
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getFamilyColor(vulnerability.family)}`}>
                  {vulnerability.family?.toUpperCase() || 'UNKNOWN'}
                </span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(vulnerability.severity)}`}>
                  {vulnerability.severity?.toUpperCase() || 'UNKNOWN'}
                </span>
              </div>
              <p className="text-sm text-gray-600 mt-1">
                {vulnerability.method} {formatUrl(vulnerability.url)}
                {vulnerability.param && ` â€¢ ${vulnerability.param}`}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            <div className="text-right">
              <p className="text-sm text-gray-500">Confidence</p>
              <p className={`text-sm font-medium ${getConfidenceColor(vulnerability.confidence)}`}>
                {formatConfidence(vulnerability.confidence)}
              </p>
            </div>
            {isExpanded ? (
              <ChevronDownIcon className="h-5 w-5 text-gray-400" />
            ) : (
              <ChevronRightIcon className="h-5 w-5 text-gray-400" />
            )}
          </div>
        </div>
      </div>

      {isExpanded && (
        <div className="border-t border-gray-200 p-4 bg-gray-50">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="text-sm font-medium text-gray-900 mb-2">Details</h4>
              <dl className="space-y-1">
                <div>
                  <dt className="text-xs text-gray-500">URL</dt>
                  <dd className="text-sm text-gray-900 font-mono break-all">{vulnerability.url}</dd>
                </div>
                <div>
                  <dt className="text-xs text-gray-500">Parameter</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.param || 'N/A'}</dd>
                </div>
                <div>
                  <dt className="text-xs text-gray-500">Method</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.method}</dd>
                </div>
                <div>
                  <dt className="text-xs text-gray-500">Status Code</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.status || 'N/A'}</dd>
                </div>
              </dl>
            </div>
            
            <div>
              <h4 className="text-sm font-medium text-gray-900 mb-2">Technical Details</h4>
              <dl className="space-y-1">
                <div>
                  <dt className="text-xs text-gray-500">Evidence ID</dt>
                  <dd className="text-sm text-gray-900 font-mono">{vulnerability.evidence_id || 'N/A'}</dd>
                </div>
                <div>
                  <dt className="text-xs text-gray-500">Rank Source</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.rank_source || 'N/A'}</dd>
                </div>
                <div>
                  <dt className="text-xs text-gray-500">ML Role</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.ml_role || 'N/A'}</dd>
                </div>
                <div>
                  <dt className="text-xs text-gray-500">Timing</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.timing_ms ? `${vulnerability.timing_ms}ms` : 'N/A'}</dd>
                </div>
              </dl>
            </div>
          </div>
          
          {vulnerability.why && vulnerability.why.length > 0 && (
            <div className="mt-4">
              <h4 className="text-sm font-medium text-gray-900 mb-2">Detection Reasons</h4>
              <div className="flex flex-wrap gap-1">
                {vulnerability.why.map((reason, idx) => (
                  <span key={idx} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                    {reason}
                  </span>
                ))}
              </div>
            </div>
          )}

          {/* XSS Context */}
          {vulnerability.xss_context && (
            <div className="mt-4">
              <h4 className="text-sm font-medium text-gray-900 mb-2">XSS Context</h4>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <dt className="text-xs text-gray-500">Context</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.xss_context}</dd>
                </div>
                <div>
                  <dt className="text-xs text-gray-500">Escaping</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.xss_escaping || 'N/A'}</dd>
                </div>
              </div>
            </div>
          )}

          {/* SQLi Dialect */}
          {vulnerability.sqli_dialect && (
            <div className="mt-4">
              <h4 className="text-sm font-medium text-gray-900 mb-2">SQLi Dialect</h4>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <dt className="text-xs text-gray-500">Detected Dialect</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.sqli_dialect}</dd>
                </div>
                <div>
                  <dt className="text-xs text-gray-500">Source</dt>
                  <dd className="text-sm text-gray-900">{vulnerability.sqli_dialect_source || 'N/A'}</dd>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default VulnerabilityCard;
